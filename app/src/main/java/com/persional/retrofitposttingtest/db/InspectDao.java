package com.persional.retrofitposttingtest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.persional.retrofitposttingtest.db.entity.Inspect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT".
*/
public class InspectDao extends AbstractDao<Inspect, String> {

    public static final String TABLENAME = "INSPECT";

    /**
     * Properties of entity Inspect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Roadname = new Property(0, String.class, "roadname", false, "ROADNAME");
        public final static Property Inspectiondate = new Property(1, String.class, "inspectiondate", false, "INSPECTIONDATE");
        public final static Property Weather = new Property(2, String.class, "weather", false, "WEATHER");
        public final static Property Checkpos = new Property(3, String.class, "checkpos", false, "CHECKPOS");
        public final static Property Information = new Property(4, String.class, "information", false, "INFORMATION");
        public final static Property Process = new Property(5, String.class, "process", false, "PROCESS");
        public final static Property Imagepath = new Property(6, String.class, "imagepath", false, "IMAGEPATH");
        public final static Property Createdate = new Property(7, String.class, "createdate", false, "CREATEDATE");
        public final static Property Roadcode = new Property(8, String.class, "roadcode", false, "ROADCODE");
        public final static Property Inspectionid = new Property(9, String.class, "inspectionid", true, "INSPECTIONID");
        public final static Property Address = new Property(10, String.class, "address", false, "ADDRESS");
    }


    public InspectDao(DaoConfig config) {
        super(config);
    }
    
    public InspectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT\" (" + //
                "\"ROADNAME\" TEXT," + // 0: roadname
                "\"INSPECTIONDATE\" TEXT," + // 1: inspectiondate
                "\"WEATHER\" TEXT," + // 2: weather
                "\"CHECKPOS\" TEXT," + // 3: checkpos
                "\"INFORMATION\" TEXT," + // 4: information
                "\"PROCESS\" TEXT," + // 5: process
                "\"IMAGEPATH\" TEXT," + // 6: imagepath
                "\"CREATEDATE\" TEXT," + // 7: createdate
                "\"ROADCODE\" TEXT," + // 8: roadcode
                "\"INSPECTIONID\" TEXT PRIMARY KEY NOT NULL ," + // 9: inspectionid
                "\"ADDRESS\" TEXT);"); // 10: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inspect entity) {
        stmt.clearBindings();
 
        String roadname = entity.getRoadname();
        if (roadname != null) {
            stmt.bindString(1, roadname);
        }
 
        String inspectiondate = entity.getInspectiondate();
        if (inspectiondate != null) {
            stmt.bindString(2, inspectiondate);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(3, weather);
        }
 
        String checkpos = entity.getCheckpos();
        if (checkpos != null) {
            stmt.bindString(4, checkpos);
        }
 
        String information = entity.getInformation();
        if (information != null) {
            stmt.bindString(5, information);
        }
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(6, process);
        }
 
        String imagepath = entity.getImagepath();
        if (imagepath != null) {
            stmt.bindString(7, imagepath);
        }
 
        String createdate = entity.getCreatedate();
        if (createdate != null) {
            stmt.bindString(8, createdate);
        }
 
        String roadcode = entity.getRoadcode();
        if (roadcode != null) {
            stmt.bindString(9, roadcode);
        }
 
        String inspectionid = entity.getInspectionid();
        if (inspectionid != null) {
            stmt.bindString(10, inspectionid);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inspect entity) {
        stmt.clearBindings();
 
        String roadname = entity.getRoadname();
        if (roadname != null) {
            stmt.bindString(1, roadname);
        }
 
        String inspectiondate = entity.getInspectiondate();
        if (inspectiondate != null) {
            stmt.bindString(2, inspectiondate);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(3, weather);
        }
 
        String checkpos = entity.getCheckpos();
        if (checkpos != null) {
            stmt.bindString(4, checkpos);
        }
 
        String information = entity.getInformation();
        if (information != null) {
            stmt.bindString(5, information);
        }
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(6, process);
        }
 
        String imagepath = entity.getImagepath();
        if (imagepath != null) {
            stmt.bindString(7, imagepath);
        }
 
        String createdate = entity.getCreatedate();
        if (createdate != null) {
            stmt.bindString(8, createdate);
        }
 
        String roadcode = entity.getRoadcode();
        if (roadcode != null) {
            stmt.bindString(9, roadcode);
        }
 
        String inspectionid = entity.getInspectionid();
        if (inspectionid != null) {
            stmt.bindString(10, inspectionid);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9);
    }    

    @Override
    public Inspect readEntity(Cursor cursor, int offset) {
        Inspect entity = new Inspect( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // roadname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // inspectiondate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weather
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // checkpos
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // information
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // process
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imagepath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createdate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // roadcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // inspectionid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inspect entity, int offset) {
        entity.setRoadname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setInspectiondate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeather(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckpos(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInformation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProcess(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImagepath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoadcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInspectionid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Inspect entity, long rowId) {
        return entity.getInspectionid();
    }
    
    @Override
    public String getKey(Inspect entity) {
        if(entity != null) {
            return entity.getInspectionid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inspect entity) {
        return entity.getInspectionid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
